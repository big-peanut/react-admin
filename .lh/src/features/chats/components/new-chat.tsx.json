{
    "sourceFile": "src/features/chats/components/new-chat.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740976201226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740976421167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,15 @@\n \r\n   const onSubmit = () => {\r\n     toast({\r\n       title: 'Your Changes Have Been Saved',\r\n+      description: (\r\n+        <pre className='mt-2 w-[340px] rounded-md bg-slate-950 p-4'>\r\n+          <code className='text-white'>\r\n+            {JSON.stringify(selectedUsers, null, 2)}\r\n+          </code>\r\n+        </pre>\r\n+      ),\r\n     })\r\n   }\r\n \r\n   return (\r\n"
                }
            ],
            "date": 1740976201226,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react'\r\nimport { IconCheck, IconX } from '@tabler/icons-react'\r\nimport { toast } from '@/hooks/use-toast'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from '@/components/ui/command'\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog'\r\nimport { ChatUser } from '../data/chat-types'\r\n\r\ntype User = Omit<ChatUser, 'messages'>\r\n\r\ntype Props = {\r\n  users: User[]\r\n  open: boolean\r\n  onOpenChange: (open: boolean) => void\r\n}\r\nexport function NewChat({ users, onOpenChange, open }: Props) {\r\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([])\r\n\r\n  const handleSelectUser = (user: User) => {\r\n    if (!selectedUsers.find((u) => u.id === user.id)) {\r\n      setSelectedUsers([...selectedUsers, user])\r\n    } else {\r\n      handleRemoveUser(user.id)\r\n    }\r\n  }\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    setSelectedUsers(selectedUsers.filter((user) => user.id !== userId))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setSelectedUsers([])\r\n    }\r\n  }, [open])\r\n\r\n  const onSubmit = () => {\r\n    toast({\r\n      title: 'Your Changes Have Been Saved',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className='sm:max-w-[600px]'>\r\n        <DialogHeader>\r\n          <DialogTitle>New message</DialogTitle>\r\n        </DialogHeader>\r\n        <div className='flex flex-col gap-4'>\r\n          <div className='flex flex-wrap items-center gap-2'>\r\n            <span className='text-sm text-zinc-400'>To:</span>\r\n            {selectedUsers.map((user) => (\r\n              <Badge key={user.id} variant='default'>\r\n                {user.fullName}\r\n                <button\r\n                  className='ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2'\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter') {\r\n                      handleRemoveUser(user.id)\r\n                    }\r\n                  }}\r\n                  onClick={() => handleRemoveUser(user.id)}\r\n                >\r\n                  <IconX className='h-3 w-3 text-muted-foreground hover:text-foreground' />\r\n                </button>\r\n              </Badge>\r\n            ))}\r\n          </div>\r\n          <Command className='rounded-lg border'>\r\n            <CommandInput\r\n              placeholder='Search people...'\r\n              className='text-foreground'\r\n            />\r\n            <CommandList>\r\n              <CommandEmpty>No people found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {users.map((user) => (\r\n                  <CommandItem\r\n                    key={user.id}\r\n                    onSelect={() => handleSelectUser(user)}\r\n                    className='flex items-center justify-between gap-2'\r\n                  >\r\n                    <div className='flex items-center gap-2'>\r\n                      <img\r\n                        src={user.profile || '/placeholder.svg'}\r\n                        alt={user.fullName}\r\n                        className='h-8 w-8 rounded-full'\r\n                      />\r\n                      <div className='flex flex-col'>\r\n                        <span className='text-sm font-medium'>\r\n                          {user.fullName}\r\n                        </span>\r\n                        <span className='text-xs text-zinc-400'>\r\n                          {user.username}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {selectedUsers.find((u) => u.id === user.id) && (\r\n                      <IconCheck className='h-4 w-4' />\r\n                    )}\r\n                  </CommandItem>\r\n                ))}\r\n              </CommandGroup>\r\n            </CommandList>\r\n          </Command>\r\n          <Button\r\n            variant={'default'}\r\n            onClick={onSubmit}\r\n            disabled={selectedUsers.length === 0}\r\n          >\r\n            Chat\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n"
        }
    ]
}