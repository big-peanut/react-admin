{
    "sourceFile": "src/features/settings/profile/profile-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740976243987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740976387073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,16 @@\n     name: 'urls',\r\n     control: form.control,\r\n   })\r\n \r\n-  const onSubmit = () => {\r\n+  function onSubmit(data: ProfileFormValues) {\r\n     toast({\r\n-      title: 'Your Changes Have Been Saved',\r\n+      title: 'You submitted the following values:',\r\n+      description: (\r\n+        <pre className='mt-2 w-[340px] rounded-md bg-slate-950 p-4'>\r\n+          <code className='text-white'>{JSON.stringify(data, null, 2)}</code>\r\n+        </pre>\r\n+      ),\r\n     })\r\n   }\r\n \r\n   return (\r\n"
                }
            ],
            "date": 1740976243987,
            "name": "Commit-0",
            "content": "import { z } from 'zod'\r\nimport { useFieldArray, useForm } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport { Link } from '@tanstack/react-router'\r\nimport { cn } from '@/lib/utils'\r\nimport { toast } from '@/hooks/use-toast'\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '@/components/ui/form'\r\nimport { Input } from '@/components/ui/input'\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select'\r\nimport { Textarea } from '@/components/ui/textarea'\r\n\r\nconst profileFormSchema = z.object({\r\n  username: z\r\n    .string()\r\n    .min(2, {\r\n      message: 'Username must be at least 2 characters.',\r\n    })\r\n    .max(30, {\r\n      message: 'Username must not be longer than 30 characters.',\r\n    }),\r\n  email: z\r\n    .string({\r\n      required_error: 'Please select an email to display.',\r\n    })\r\n    .email(),\r\n  bio: z.string().max(160).min(4),\r\n  urls: z\r\n    .array(\r\n      z.object({\r\n        value: z.string().url({ message: 'Please enter a valid URL.' }),\r\n      })\r\n    )\r\n    .optional(),\r\n})\r\n\r\ntype ProfileFormValues = z.infer<typeof profileFormSchema>\r\n\r\n// This can come from your database or API.\r\nconst defaultValues: Partial<ProfileFormValues> = {\r\n  bio: 'I own a computer.',\r\n  urls: [\r\n    { value: 'https://shadcn.com' },\r\n    { value: 'http://twitter.com/shadcn' },\r\n  ],\r\n}\r\n\r\nexport default function ProfileForm() {\r\n  const form = useForm<ProfileFormValues>({\r\n    resolver: zodResolver(profileFormSchema),\r\n    defaultValues,\r\n    mode: 'onChange',\r\n  })\r\n\r\n  const { fields, append } = useFieldArray({\r\n    name: 'urls',\r\n    control: form.control,\r\n  })\r\n\r\n  const onSubmit = () => {\r\n    toast({\r\n      title: 'Your Changes Have Been Saved',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n        <FormField\r\n          control={form.control}\r\n          name='username'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Username</FormLabel>\r\n              <FormControl>\r\n                <Input placeholder='shadcn' {...field} />\r\n              </FormControl>\r\n              <FormDescription>\r\n                This is your public display name. It can be your real name or a\r\n                pseudonym. You can only change this once every 30 days.\r\n              </FormDescription>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <FormField\r\n          control={form.control}\r\n          name='email'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Email</FormLabel>\r\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                <FormControl>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder='Select a verified email to display' />\r\n                  </SelectTrigger>\r\n                </FormControl>\r\n                <SelectContent>\r\n                  <SelectItem value='m@example.com'>m@example.com</SelectItem>\r\n                  <SelectItem value='m@google.com'>m@google.com</SelectItem>\r\n                  <SelectItem value='m@support.com'>m@support.com</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <FormDescription>\r\n                You can manage verified email addresses in your{' '}\r\n                <Link to='/'>email settings</Link>.\r\n              </FormDescription>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <FormField\r\n          control={form.control}\r\n          name='bio'\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Bio</FormLabel>\r\n              <FormControl>\r\n                <Textarea\r\n                  placeholder='Tell us a little bit about yourself'\r\n                  className='resize-none'\r\n                  {...field}\r\n                />\r\n              </FormControl>\r\n              <FormDescription>\r\n                You can <span>@mention</span> other users and organizations to\r\n                link to them.\r\n              </FormDescription>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <div>\r\n          {fields.map((field, index) => (\r\n            <FormField\r\n              control={form.control}\r\n              key={field.id}\r\n              name={`urls.${index}.value`}\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className={cn(index !== 0 && 'sr-only')}>\r\n                    URLs\r\n                  </FormLabel>\r\n                  <FormDescription className={cn(index !== 0 && 'sr-only')}>\r\n                    Add links to your website, blog, or social media profiles.\r\n                  </FormDescription>\r\n                  <FormControl>\r\n                    <Input {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          ))}\r\n          <Button\r\n            type='button'\r\n            variant='outline'\r\n            size='sm'\r\n            className='mt-2'\r\n            onClick={() => append({ value: '' })}\r\n          >\r\n            Add URL\r\n          </Button>\r\n        </div>\r\n        <Button type='submit'>Update profile</Button>\r\n      </form>\r\n    </Form>\r\n  )\r\n}\r\n"
        }
    ]
}