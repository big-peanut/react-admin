{
    "sourceFile": "src/features/users/components/users-table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740983017891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740983017891,
            "name": "Commit-0",
            "content": "import { useState } from 'react'\r\nimport {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  RowData,\r\n  SortingState,\r\n  VisibilityState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFacetedRowModel,\r\n  getFacetedUniqueValues,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n} from '@tanstack/react-table'\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table'\r\nimport { User } from '../data/schema'\r\nimport { DataTablePagination } from './data-table-pagination'\r\nimport { DataTableToolbar } from './data-table-toolbar'\r\n\r\ndeclare module '@tanstack/react-table' {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface ColumnMeta<TData extends RowData, TValue> {\r\n    className: string\r\n  }\r\n}\r\n\r\ninterface DataTableProps {\r\n  columns: ColumnDef<User>[]\r\n  data: User[]\r\n}\r\n\r\nexport function UsersTable({ columns, data }: DataTableProps) {\r\n  const [rowSelection, setRowSelection] = useState({})\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\r\n  const [sorting, setSorting] = useState<SortingState>([])\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    state: {\r\n      sorting,\r\n      columnVisibility,\r\n      rowSelection,\r\n      columnFilters,\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFacetedRowModel: getFacetedRowModel(),\r\n    getFacetedUniqueValues: getFacetedUniqueValues(),\r\n  })\r\n\r\n  return (\r\n    <div className='space-y-4'>\r\n      <DataTableToolbar table={table} />\r\n      <div className='rounded-md border'>\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id} className='group/row'>\r\n                {headerGroup.headers.map((header) => {\r\n                  return (\r\n                    <TableHead\r\n                      key={header.id}\r\n                      colSpan={header.colSpan}\r\n                      className={header.column.columnDef.meta?.className ?? ''}\r\n                    >\r\n                      {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(\r\n                            header.column.columnDef.header,\r\n                            header.getContext()\r\n                          )}\r\n                    </TableHead>\r\n                  )\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  data-state={row.getIsSelected() && 'selected'}\r\n                  className='group/row'\r\n                >\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <TableCell\r\n                      key={cell.id}\r\n                      className={cell.column.columnDef.meta?.className ?? ''}\r\n                    >\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext()\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={columns.length}\r\n                  className='h-24 text-center'\r\n                >\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      <DataTablePagination table={table} />\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}